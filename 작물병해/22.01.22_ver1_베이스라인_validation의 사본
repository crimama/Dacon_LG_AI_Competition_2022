{"cells":[{"cell_type":"markdown","metadata":{"id":"ETxqJYy-l0gL"},"source":["# 사전 준비 "]},{"cell_type":"markdown","metadata":{"id":"Ab8zJIYh-fgL"},"source":["##데이터 호출 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":151165,"status":"ok","timestamp":1642853355880,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"fJThLClH-hr9","outputId":"d59cd6c8-a0ce-405d-e7c0-1f224c03db4b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Archive:  /content/drive/MyDrive/DataSet/작물병해/data.zip\n","  inflating: sample_submission.csv   \n","  inflating: test.zip                \n","  inflating: train.csv               \n","  inflating: train.zip               \n"]}],"source":["!unzip /content/drive/MyDrive/DataSet/작물병해/data.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1-0ubyia_1Nu"},"outputs":[],"source":["!unzip train.zip"]},{"cell_type":"markdown","metadata":{"id":"Zo0y4tau_V4E"},"source":["## 모듈 임포트"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dRznw7f2_XCs"},"outputs":[],"source":["import pandas as pd \n","import numpy as np \n","import matplotlib.pyplot as plt \n","import os\n","import cv2 \n","from glob import glob\n","from tqdm import tqdm\n","import json"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"820F_6HCb9-1"},"outputs":[],"source":["from tensorflow.keras import Sequential\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.layers import BatchNormalization\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Activation\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras import Model\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.applications import resnet50, efficientnet\n","from tensorflow.keras.applications import ResNet50, EfficientNetB0\n","from tensorflow.keras.layers import Bidirectional, LSTM, GRU"]},{"cell_type":"markdown","metadata":{"id":"MM2kasZcgPEq"},"source":["# 데이터 로드"]},{"cell_type":"markdown","metadata":{"id":"1fg7KDK2gRuo"},"source":["## 디렉토리 로드"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lfYFmBZyHZEh"},"outputs":[],"source":["train_csv = sorted(glob('train/*/*.csv'))\n","train_jpg = sorted(glob('train/*/*.jpg'))\n","train_json = sorted(glob('train/*/*.json'))"]},{"cell_type":"markdown","metadata":{"id":"28xaif_JgT0P"},"source":["## json 파일 로드"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":274,"status":"error","timestamp":1642863161354,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"hQmRd8iLH6GH","colab":{"base_uri":"https://localhost:8080/","height":247},"outputId":"83326fd6-0087-4dae-fca5-aefa13a572fc"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-f6ca2692d395>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_json\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_json\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'train_json' is not defined"]}],"source":["crops = []\n","diseases = []\n","risks = []\n","labels = []\n","\n","for i in range(len(train_json)):\n","    with open(train_json[i], 'r') as f:\n","        sample = json.load(f)\n","        crop = sample['annotations']['crop']\n","        disease = sample['annotations']['disease']\n","        risk = sample['annotations']['risk']\n","        label=f\"{crop}_{disease}_{risk}\"\n","    \n","        crops.append(crop)\n","        diseases.append(disease)\n","        risks.append(risk)\n","        labels.append(label)\n","        \n","label_unique = sorted(np.unique(labels))\n","label_unique = {key:value for key,value in zip(label_unique, range(len(label_unique)))}\n","\n","labels = [label_unique[k] for k in labels]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"elapsed":385,"status":"ok","timestamp":1642853457630,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"jLgMwRZcEUbH","outputId":"9664c845-b255-474d-d802-81a0a086ab3c"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.subplot(2,1,1)\n","plt.hist(diseases)\n","plt.subplot(2,1,2)\n","plt.hist(labels)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":334,"status":"ok","timestamp":1642853461098,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"xRBw91zKQavt","outputId":"1ef4fb52-b80b-48b5-d09d-a4d2745484ac"},"outputs":[{"data":{"text/plain":["25"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["len(set(labels))"]},{"cell_type":"markdown","metadata":{"id":"e2knImhRgc6n"},"source":["## 이미지 로드 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27417,"status":"ok","timestamp":1642853489765,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"JWCW1qcEgdyK","outputId":"a80c3dbd-6c68-487b-b13b-7698188be09d"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 5767/5767 [00:27<00:00, 209.87it/s]\n"]}],"source":["def img_load(path):\n","    img = cv2.imread(path)\n","    img = cv2.resize(img, (224, 224))\n","    return img\n","\n","imgs = [img_load(k) for k in tqdm(train_jpg)]"]},{"cell_type":"markdown","metadata":{"id":"R2PS5knLRCiM"},"source":["## CSV 로드 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"155mYE2Rs0hq"},"outputs":[],"source":["csv_features = ['내부 온도 1 평균', '내부 온도 1 최고', '내부 온도 1 최저', '내부 습도 1 평균', '내부 습도 1 최고', \n","               '내부 습도 1 최저', '내부 이슬점 평균', '내부 이슬점 최고', '내부 이슬점 최저']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":38581,"status":"ok","timestamp":1642853534015,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"mYKt9__jtFDC","outputId":"a0f89359-0f9c-4e51-d8a0-5d3cfb8f3a85"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 5767/5767 [00:38<00:00, 149.49it/s]\n"]}],"source":["def csv_load(path):\n","    temp = pd.read_csv(path)\n","    temp = np.array(temp[csv_features])\n","    try:\n","      temp = temp.astype(float)\n","    except:\n","      temp[temp=='-']=0.\n","      temp = temp.astype(float)\n","    temp = cv2.resize(temp, dsize = (9,294))\n","    return temp\n","\n","csvs = [csv_load(k) for k in tqdm(train_csv)]\n","csvs = np.array(csvs)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1642833064831,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"umlFY5f_YrHL","outputId":"957b7004-060e-422e-e686-315004c23cff"},"outputs":[{"data":{"text/plain":["(5767, 294, 9)"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["csvs.shape"]},{"cell_type":"markdown","metadata":{"id":"xnyaO2aVB5o7"},"source":["# 전처리 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-1CqlELHfApz"},"outputs":[],"source":["imgs = np.array(imgs)\n","csvs = np.array(csvs)\n","labels = np.array(labels)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AUuI1LLGjalW"},"outputs":[],"source":["imgs = efficientnet.preprocess_input(imgs)"]},{"cell_type":"markdown","metadata":{"id":"rTyk92b5P2WW"},"source":["# 모델링"]},{"cell_type":"markdown","metadata":{"id":"W3XLNj8uRL1N"},"source":["## 모델 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4477,"status":"ok","timestamp":1642853691145,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"2Ujo-_ObRSrv","outputId":"44b061ac-c9d6-4ff6-ba75-d29906265af3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/keras-applications/efficientnetb0_notop.h5\n","16711680/16705208 [==============================] - 0s 0us/step\n","16719872/16705208 [==============================] - 0s 0us/step\n"]}],"source":["conv_layers = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","conv_layers.trainable = False"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fqwYWJadRSrv"},"outputs":[],"source":["#Env 데이터 파트 \n","def model():\n","  Env_input = Input((294,9)) #<---- shape \n","  x = Bidirectional(LSTM(128,return_sequences= True))(Env_input) #bidirec\n","  x = Bidirectional(LSTM(128))(x)\n","  x = Flatten()(x)\n","  x = BatchNormalization()(x)\n","  x = Dense(64, activation ='relu')(x)\n","  x = BatchNormalization()(x)\n","  x = Dense(32, activation ='relu')(x)\n","  x = BatchNormalization()(x)\n","  Env_output = Dense(10 ,activation='linear')(x)\n","\n","  #iamge 데이터 파트 \n","  image_input = Input((224,224,3))\n","  x = conv_layers(image_input)\n","  x = Flatten()(x)\n","  x = BatchNormalization()(x)\n","  x = Dense(64, activation='relu')(x)\n","  x = BatchNormalization()(x)\n","  x = Dense(32, activation='relu')(x)\n","  x = BatchNormalization()(x)\n","  image_output = Dense(10, activation='linear')(x)\n","\n","  #헤드 결합 \n","  combined_input = concatenate([Env_output,image_output])\n","  # x= Dense(64, activation = 'relu')(image_output) #<--- Dense \n","  x = BatchNormalization()(combined_input)\n","  x= Dense(32, activation = 'relu')(x) #<--- Dense \n","  x = BatchNormalization()(x)\n","  output = Dense(25,activation = 'softmax')(x)\n","\n","  return Model([Env_input,image_input],output)\n","\n","label_model = model()\n","# label_model = Model(image_input,output)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":894,"status":"ok","timestamp":1642853702502,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"xcCEc1EfRSrv","outputId":"63fd0a59-7bf1-46e1-f685-704729623bb8"},"outputs":[{"data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["#모델 설계 구조 \n","import tensorflow \n","tensorflow.keras.utils.plot_model(label_model)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"adBroCJict_C"},"outputs":[],"source":["#optimizer leraning rate 조절 \n","adam = optimizers.Adam(learning_rate = 0.0005)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1642853707449,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"k_HX9oN1RSrw","outputId":"304ae46e-bd20-4c7f-ea6f-26825d35364d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_2 (InputLayer)           [(None, 294, 9)]     0           []                               \n","                                                                                                  \n"," bidirectional (Bidirectional)  (None, 294, 256)     141312      ['input_2[0][0]']                \n","                                                                                                  \n"," input_3 (InputLayer)           [(None, 224, 224, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," bidirectional_1 (Bidirectional  (None, 256)         394240      ['bidirectional[0][0]']          \n"," )                                                                                                \n","                                                                                                  \n"," efficientnetb0 (Functional)    (None, 7, 7, 1280)   4049571     ['input_3[0][0]']                \n","                                                                                                  \n"," flatten (Flatten)              (None, 256)          0           ['bidirectional_1[0][0]']        \n","                                                                                                  \n"," flatten_1 (Flatten)            (None, 62720)        0           ['efficientnetb0[0][0]']         \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 256)         1024        ['flatten[0][0]']                \n"," alization)                                                                                       \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 62720)       250880      ['flatten_1[0][0]']              \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense (Dense)                  (None, 64)           16448       ['batch_normalization[0][0]']    \n","                                                                                                  \n"," dense_3 (Dense)                (None, 64)           4014144     ['batch_normalization_3[0][0]']  \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 64)          256         ['dense[0][0]']                  \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_4 (BatchNo  (None, 64)          256         ['dense_3[0][0]']                \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_1 (Dense)                (None, 32)           2080        ['batch_normalization_1[0][0]']  \n","                                                                                                  \n"," dense_4 (Dense)                (None, 32)           2080        ['batch_normalization_4[0][0]']  \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 32)          128         ['dense_1[0][0]']                \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_5 (BatchNo  (None, 32)          128         ['dense_4[0][0]']                \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_2 (Dense)                (None, 10)           330         ['batch_normalization_2[0][0]']  \n","                                                                                                  \n"," dense_5 (Dense)                (None, 10)           330         ['batch_normalization_5[0][0]']  \n","                                                                                                  \n"," concatenate (Concatenate)      (None, 20)           0           ['dense_2[0][0]',                \n","                                                                  'dense_5[0][0]']                \n","                                                                                                  \n"," batch_normalization_6 (BatchNo  (None, 20)          80          ['concatenate[0][0]']            \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_6 (Dense)                (None, 32)           672         ['batch_normalization_6[0][0]']  \n","                                                                                                  \n"," batch_normalization_7 (BatchNo  (None, 32)          128         ['dense_6[0][0]']                \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_7 (Dense)                (None, 25)           825         ['batch_normalization_7[0][0]']  \n","                                                                                                  \n","==================================================================================================\n","Total params: 8,874,912\n","Trainable params: 4,698,901\n","Non-trainable params: 4,176,011\n","__________________________________________________________________________________________________\n"]}],"source":["#학습 방식은 동일 \n","label_model.compile(optimizer=adam, loss=\"sparse_categorical_crossentropy\",metrics = ['accuracy'],)\n","label_model.summary() #optimizer tuning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"36CSb5x4pcC1"},"outputs":[],"source":["# copy from https://gist.github.com/stared/dfb4dfaf6d9a8501cd1cc8b8cb806d2e\n","# loss 실시간 출력 \n","from IPython.display import clear_output\n","from tensorflow.keras.callbacks import Callback\n","\n","class PlotLosses(Callback):\n","\n","  def on_train_begin(self, logs={}):\n","    self.epochs = []\n","    self.losses = []\n","    self.val_losses = []\n","    self.logs = []\n","    self.fig = plt.figure()\n","\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","\n","    self.epochs.append(epoch)\n","    self.losses.append(logs.get('loss'))\n","    self.val_losses.append(logs.get('val_loss'))\n","\n","    clear_output(wait=True)\n","    plt.plot(self.epochs, self.losses, label=\"loss\")\n","    plt.plot(self.epochs, self.val_losses, label=\"val_loss\")\n","    plt.legend()\n","    plt.show();\n","    print(\"loss = \", self.losses[-1], \", val_loss = \", self.val_losses[-1])\n","\n","#call backs 선언\n","plot_losses = PlotLosses()\n","\n","from tensorflow.keras.callbacks import ModelCheckpoint #<- model 저장 객체, best_model.h5라는 모델 이 저장 됨 \n","model_check_point = ModelCheckpoint(\n","    'best_model.h5', \n","    monitor='val_loss', \n","    verbose=1, \n","    save_best_only=True)\n","\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',  # 모니터링 대상, 이걸 기준으로 멈춤 \n","    verbose=1,\n","    patience=50)         # 중지까지의 여유분\n","\n","from tensorflow.keras.callbacks import ReduceLROnPlateau\n","reduce_lr = ReduceLROnPlateau(\n","    monitor='val_loss', # 모니터링 대상\n","    patience=25,        # 대상ㅃ 기간동안 유지\n","    factor=0.2,         # 줄이는 양                              \n","    min_learning_rate=0.00001)     # 최소 학습율\n","\n","# callbacks = [model_check_point, plot_losses, early_stopping, reduce_lr]\n","callbacks = [model_check_point, plot_losses, reduce_lr]"]},{"cell_type":"markdown","metadata":{"id":"uzz5d579RSrw"},"source":["## 학습"]},{"cell_type":"markdown","metadata":{"id":"z0xfp8agluzt"},"source":["## kfold 분할"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0GnrXbfIluzu"},"outputs":[],"source":["from sklearn.model_selection import StratifiedKFold\n","skf = StratifiedKFold(n_splits=5 , shuffle = True, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":2157856,"status":"ok","timestamp":1642856788268,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"-P4d2NKKlpp9","outputId":"af3f0a0f-b8e0-4236-eb38-b54b6b27c997"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["loss =  0.10301297158002853 , val_loss =  0.3122479021549225\n"]}],"source":["model_list = []\n","for i,(trn_idx, val_idx) in enumerate(skf.split(imgs,labels)):\n","  train_imgs = imgs[trn_idx,:]\n","  train_csvs = csvs[trn_idx,:]\n","  train_labels = labels[trn_idx]\n","\n","  valid_imgs = imgs[val_idx,:]\n","  valid_csvs = csvs[val_idx,:]\n","  valid_labels = labels[val_idx]\n","\n","  label_model = model()\n","  label_model.compile(optimizer=adam, loss='sparse_categorical_crossentropy',metrics = ['accuracy'])\n","  label_model.fit([train_csvs,train_imgs],train_labels, epochs=50, verbose=30, batch_size=256, validation_data=([valid_csvs,valid_imgs],valid_labels),callbacks=callbacks)\n","  model_list.append([i,label_model])"]},{"cell_type":"markdown","metadata":{"id":"ph5792w5f7sg"},"source":["## 자체 예측 스코어"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11917,"status":"ok","timestamp":1642856890448,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"GakYBZLandTZ","outputId":"c292c666-0b45-49e8-cc92-bf8783eef183"},"outputs":[{"name":"stdout","output_type":"stream","text":["37/37 [==============================] - 2s 60ms/step - loss: 0.4502 - accuracy: 0.8829\n","[0.4501758813858032, 0.882914125919342]\n","37/37 [==============================] - 2s 60ms/step - loss: 0.2132 - accuracy: 0.9627\n","[0.2132410705089569, 0.9627059698104858]\n","37/37 [==============================] - 2s 60ms/step - loss: 0.4897 - accuracy: 0.8682\n","[0.4897310137748718, 0.8681699633598328]\n","37/37 [==============================] - 2s 60ms/step - loss: 0.0839 - accuracy: 0.9957\n","[0.08387424796819687, 0.9956634640693665]\n","37/37 [==============================] - 2s 60ms/step - loss: 0.3122 - accuracy: 0.9324\n","[0.3122478425502777, 0.9323503971099854]\n"]}],"source":["for i in range(5):\n","  print(model_list[i][1].evaluate([valid_csvs,valid_imgs],valid_labels))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":57973,"status":"ok","timestamp":1642857520944,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"60zObBJq51BR","outputId":"b6f4ae3b-90df-4d9d-f8c0-6db8f627f5ed"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 5/5 [00:57<00:00, 11.53s/it]\n"]}],"source":["predict_list  = []\n","for i in tqdm(range(5)):\n","  y_ = model_list[i][1].predict([csvs,imgs])  \n","  predict_list.append(y_)\n","predicted = predict_list[0]+predict_list[1]+predict_list[2]+predict_list[3]+predict_list[4]\n","predicted = np.argmax(predicted,axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"79eQ71Xm6EOo"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2098,"status":"ok","timestamp":1642857678713,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"oPs_e1HV8W-b","outputId":"35d8d828-e339-4fff-e4fd-4df96a5d08a1"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]}],"source":["model_list[4][1].save('en_model_5.h5')"]},{"cell_type":"markdown","metadata":{"id":"GuVLESWBCvfq"},"source":["# submission  - 앙상블 : 소프트 보팅 "]},{"cell_type":"markdown","metadata":{"id":"IttqGAaN_jHT"},"source":["## 모델 로드"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23227,"status":"ok","timestamp":1642864718847,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"PJd6-ClH84DE","outputId":"8955f17e-f2bf-42a5-fda3-23eadcab9f3c"},"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n","WARNING:tensorflow:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n","WARNING:tensorflow:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n","WARNING:tensorflow:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n","WARNING:tensorflow:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n"]}],"source":["import tensorflow as tf\n","model_list = []\n","for i in range(1,6):\n","  new_model = tf.keras.models.load_model(f'en_model_{i}.h5')\n","  model_list.append(new_model)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":308,"status":"ok","timestamp":1642863766606,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"iUJTB5q49b4b","outputId":"4df98929-6c87-446f-a2f4-711de10ac72d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<keras.engine.functional.Functional at 0x7f1156d205d0>,\n"," <keras.engine.functional.Functional at 0x7f1155885150>,\n"," <keras.engine.functional.Functional at 0x7f10d64d9d90>,\n"," <keras.engine.functional.Functional at 0x7f10b92db190>,\n"," <keras.engine.functional.Functional at 0x7f115697f110>]"]},"metadata":{},"execution_count":11}],"source":["model_list"]},{"cell_type":"markdown","metadata":{"id":"a_E3e1a0eTk7"},"source":["## 데이터 로드 및 학습 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"--MGhc3X_ibd"},"outputs":[],"source":["csv_features = ['내부 온도 1 평균', '내부 온도 1 최고', '내부 온도 1 최저', '내부 습도 1 평균', '내부 습도 1 최고', \n","               '내부 습도 1 최저', '내부 이슬점 평균', '내부 이슬점 최고', '내부 이슬점 최저']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JLo93tBplXtx"},"outputs":[],"source":["!unzip test.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tY_2ayckIHA4"},"outputs":[],"source":["test_csv = sorted(glob('test/*/*.csv'))\n","test_jpg = sorted(glob('test/*/*.jpg'))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UdvAAtkeILyk"},"outputs":[],"source":["i = 10381\n","# pred_csv_1 = np.array(test_csv[:i])\n","# pred_jpg_1 = np.array(test_jpg[:i])\n","\n","# pred_csv_2 = np.array(test_csv[i:i*2])\n","# pred_jpg_2 = np.array(test_jpg[i:i*2])\n","\n","# pred_csv_3 = np.array(test_csv[i*2:i*3])\n","# pred_jpg_3 = np.array(test_jpg[i*2:i*3])\n","\n","# pred_csv_4 = np.array(test_csv[i*3:i*4])\n","# pred_jpg_4 = np.array(test_jpg[i*3:i*4])\n","\n","pred_csv_5 = np.array(test_csv[i*4:])\n","pred_jpg_5 = np.array(test_jpg[i*4:])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":278,"status":"ok","timestamp":1642862231662,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"xsZMKJjzIl5D","outputId":"b0b923e8-2905-4dea-8702-eacddf6cbfcf"},"outputs":[{"output_type":"stream","name":"stdout","text":["(10381,) (10381,) (10381,) (10381,) (10382,)\n"]}],"source":["print(pred_csv_1.shape,pred_csv_2.shape,pred_csv_3.shape,pred_csv_4.shape,pred_csv_5.shape)"]},{"cell_type":"markdown","metadata":{"id":"_h5DkGsLJGhX"},"source":["사전 설정"]},{"cell_type":"code","source":["def img_load(path):\n","  img = cv2.imread(path)[:,:,::-1]\n","  img = cv2.resize(img, (224, 224))\n","  return img\n","def csv_load(path):\n","  temp = pd.read_csv(path)\n","  temp = np.array(temp[csv_features])\n","  try:\n","    temp = temp.astype(float)\n","  except:\n","    temp[temp=='-']=0.\n","    temp = temp.astype(float)\n","  temp = cv2.resize(temp, dsize = (9,294))\n","  return temp\n","\n","def ens_predict(csvs,imgs):\n","  predict_list = []\n","  for i in tqdm(range(5)):\n","    y_ = model_list[i].predict([csvs,imgs])  \n","    predict_list.append(y_)\n","  predicted = predict_list[0]+predict_list[1]+predict_list[2]+predict_list[3]+predict_list[4]\n","  predicted = np.argmax(predicted,axis=1)\n","  return predicted"],"metadata":{"id":"L2falbeYOG72"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Y7zPxrWI6Df","executionInfo":{"status":"ok","timestamp":1642865008404,"user_tz":-540,"elapsed":255864,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"20b9239d-ed0e-42b9-eb63-af72fac93ab4"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 10382/10382 [01:06<00:00, 155.95it/s]\n","100%|██████████| 10382/10382 [01:13<00:00, 141.59it/s]\n","100%|██████████| 5/5 [01:54<00:00, 23.00s/it]"]},{"output_type":"stream","name":"stdout","text":["5\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["#이미지 파일 로드 \n","for i in range(5,6):\n","  exec(f'jpg_source = pred_jpg_{i}')\n","  exec(f'csv_source = pred_csv_{i}')\n","\n","  pred_jpgs = [img_load(k) for k in tqdm(jpg_source)]\n","  pred_jpgs = np.array(pred_jpgs)\n","  pred_jpgs = efficientnet.preprocess_input(pred_jpgs)\n","\n","  #csv 파일 로드 \n","\n","  pred_csvs = [csv_load(k) for k in tqdm(csv_source)]\n","  pred_csvs = np.array(pred_csvs)\n","\n","  #학습 \n","\n","  predicted_label = ens_predict(pred_csvs,pred_jpgs)\n","\n","  print(i)\n","  exec(f'a_{i} = predicted_label')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":295,"status":"ok","timestamp":1642863152032,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"UASiftdxXuLY","outputId":"1bde0f2e-520f-4faa-9906-e6358144a85e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0,  3,  4, ...,  3, 11, 17])"]},"metadata":{},"execution_count":15}],"source":[""]},{"cell_type":"markdown","metadata":{"id":"uOGPqB-rcTIG"},"source":["## 라벨 디코더 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JOH_cYdbcYZ-"},"outputs":[],"source":["crops = []\n","diseases = []\n","risks = []\n","labels = []\n","\n","for i in range(len(train_json)):\n","    with open(train_json[i], 'r') as f:\n","        sample = json.load(f)\n","        crop = sample['annotations']['crop']\n","        disease = sample['annotations']['disease']\n","        risk = sample['annotations']['risk']\n","        label=f\"{crop}_{disease}_{risk}\"\n","    \n","        crops.append(crop)\n","        diseases.append(disease)\n","        risks.append(risk)\n","        labels.append(label)\n","        \n","label_decoding = sorted(np.unique(labels))\n","label_decoding = {value:key for key,value in zip(label_decoding, range(len(label_decoding)))}"]},{"cell_type":"markdown","metadata":{"id":"JQv08PrPYJEQ"},"source":["## submission"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RXgG83CDYJsg"},"outputs":[],"source":["submission = pd.read_csv('/content/submission13.csv')"]},{"cell_type":"code","source":["submission.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"PxZ_vSLVXJJz","executionInfo":{"status":"ok","timestamp":1642865032302,"user_tz":-540,"elapsed":271,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"2e7f4a1b-9dc9-471a-b59d-dbf25ccc495d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-8a6f66c1-dced-4dd5-9017-9505e909d1a3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10000</td>\n","      <td>6_00_0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10001</td>\n","      <td>5_b6_1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10002</td>\n","      <td>4_00_0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10003</td>\n","      <td>3_00_0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10004</td>\n","      <td>3_b8_1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a6f66c1-dced-4dd5-9017-9505e909d1a3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8a6f66c1-dced-4dd5-9017-9505e909d1a3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8a6f66c1-dced-4dd5-9017-9505e909d1a3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   image   label\n","0  10000  6_00_0\n","1  10001  5_b6_1\n","2  10002  4_00_0\n","3  10003  3_00_0\n","4  10004  3_b8_1"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aCpKNs6mYYCQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642865037726,"user_tz":-540,"elapsed":305,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"7cb4bd61-3782-410f-c7f5-b8e57302cf17"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"]}],"source":["i=10381\n","# submission['label'][:i] =a_1\n","# submission['label'][i:i*2] = a_2\n","# submission['label'][i*2:i*3] = a_3\n","# submission['label'][i*3:i*4] = a_4\n","submission['label'][i*4:] = a_5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MWfsTjk8dIIt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642865051743,"user_tz":-540,"elapsed":274,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"965a384a-2648-4d72-8b67-d38c9b9222bd"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n"]}],"source":["submission['label'][i*4:] = submission['label'][i*4:].apply(lambda x:label_decoding[x])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bRRY1BF0de1O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1642865058773,"user_tz":-540,"elapsed":301,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"f8287864-fe21-4690-d7d0-32929b69943a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0        6_00_0\n","1        5_b6_1\n","2        4_00_0\n","3        3_00_0\n","4        3_b8_1\n","          ...  \n","51901    4_00_0\n","51902    3_b7_1\n","51903    6_00_0\n","51904    2_a5_2\n","51905    6_00_0\n","Name: label, Length: 51906, dtype: object"]},"metadata":{},"execution_count":18}],"source":["submission['label']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kQj9wuEodf-M"},"outputs":[],"source":["submission.to_csv('submission14.csv',index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":426,"status":"ok","timestamp":1642818767991,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"g8gvEwEd02Mg","outputId":"f1fb8ccf-ffb4-4450-eaaf-fd216921e29c"},"outputs":[{"name":"stdout","output_type":"stream","text":["cp: cannot stat 'submission4.csv': No such file or directory\n"]}],"source":["!cp submission4.csv /content/drive/MyDrive/모델"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"machine_shape":"hm","name":"22.01.22_ver1_베이스라인_validation의 사본","provenance":[{"file_id":"1Xjt-pcTOEtJQ4lJf3H7-sfW9022lsbqU","timestamp":1642865143563},{"file_id":"1IwQ_PgYuzU-0uJguU1z3CQgG7mDo01-K","timestamp":1642642447462}],"mount_file_id":"1Xjt-pcTOEtJQ4lJf3H7-sfW9022lsbqU","authorship_tag":"ABX9TyP3mtEfnF5KjpdfDF8ot4JB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}