{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"22.01.24_Ver5_작물병해_image_padding","provenance":[{"file_id":"10vdwd65pXjRZ2JDpnFNgyrSPA50TVJSh","timestamp":1643038430789}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm","mount_file_id":"10vdwd65pXjRZ2JDpnFNgyrSPA50TVJSh","authorship_tag":"ABX9TyP038BHVKQ6zSWh5BA/qRIn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# 사전 준비 "],"metadata":{"id":"15th31rhJkGD"}},{"cell_type":"code","source":["!unzip /content/drive/MyDrive/DataSet/작물병해/data.zip"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cieCw-2EJlT8","executionInfo":{"status":"ok","timestamp":1643028996657,"user_tz":-540,"elapsed":152319,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"ac79b3b3-9f78-4ea0-9607-3c5143ead8fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  /content/drive/MyDrive/DataSet/작물병해/data.zip\n","  inflating: sample_submission.csv   \n","  inflating: test.zip                \n","  inflating: train.csv               \n","  inflating: train.zip               \n"]}]},{"cell_type":"code","source":["!unzip train.zip"],"metadata":{"id":"2fP9_GEnJoAp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 모듈 임포트"],"metadata":{"id":"Ega_BRAfKTfz"}},{"cell_type":"code","source":["import pandas as pd \n","import numpy as np \n","import matplotlib.pyplot as plt \n","import os\n","import cv2 \n","from glob import glob\n","from tqdm import tqdm\n","import json"],"metadata":{"id":"RlcfG9vdKUm3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf \n","from tensorflow import keras\n","from tensorflow.keras import Sequential\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.layers import BatchNormalization\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Activation\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras import Model\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.applications import resnet50, efficientnet\n","from tensorflow.keras.applications import ResNet50, EfficientNetB0\n","from tensorflow.keras.layers import Bidirectional, LSTM, GRU"],"metadata":{"id":"MiZ791u7KVg6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 데이터 로드 "],"metadata":{"id":"DzCPlHrIKWQQ"}},{"cell_type":"markdown","source":["## 디렉토리 로드 "],"metadata":{"id":"EI8v-ZZtKag9"}},{"cell_type":"code","source":["train_csv = sorted(glob('train/*/*.csv'))\n","train_jpg = sorted(glob('train/*/*.jpg'))\n","train_json = sorted(glob('train/*/*.json'))"],"metadata":{"id":"M-wMxlejKb9v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Json 파일 로드 "],"metadata":{"id":"1lWmICcgKcyS"}},{"cell_type":"code","source":["crops = []\n","diseases = []\n","risks = []\n","labels = []\n","bboxes=[]\n","\n","for i in range(len(train_json)):\n","    with open(train_json[i], 'r') as f:\n","        sample = json.load(f)\n","        crop = sample['annotations']['crop']\n","        disease = sample['annotations']['disease']\n","        risk = sample['annotations']['risk']\n","        label=f\"{crop}_{disease}_{risk}\"\n","        bbox = list(sample['annotations']['bbox'][0].values())\n","    \n","        crops.append(crop)\n","        diseases.append(disease)\n","        risks.append(risk)\n","        labels.append(label)\n","        bboxes.append(bbox)\n","        \n","label_unique = sorted(np.unique(labels))\n","label_unique = {key:value for key,value in zip(label_unique, range(len(label_unique)))}\n","label_decoding = {value:key for key,value in zip(label_unique, range(len(label_unique)))}\n","\n","labels = [label_unique[k] for k in labels]"],"metadata":{"id":"bBpj60moKd-Z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 이미지 로드 "],"metadata":{"id":"EjQpQY-CKhqC"}},{"cell_type":"code","source":["standard_y = 512 \n","standard_x = 1081\n","borderType = cv2.BORDER_CONSTANT\n","top = 0\n","bottom =0\n","left = 0 \n","def img_load(path):\n","    img = cv2.imread(path)\n","    right = standard_x - img.shape[1]\n","    img = cv2.copyMakeBorder(img, top, bottom, left, right, borderType)\n","    return img\n","\n","imgs = [img_load(k) for k in tqdm(train_jpg)]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-FONmTX1Kj_2","executionInfo":{"status":"ok","timestamp":1643035524420,"user_tz":-540,"elapsed":28358,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"75c983eb-883f-4641-ec2d-25dbf604c581"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 5767/5767 [00:28<00:00, 204.49it/s]\n"]}]},{"cell_type":"markdown","source":["## CSV 로드 "],"metadata":{"id":"d7jguq7zKkzf"}},{"cell_type":"code","source":["csv_features = ['내부 온도 1 평균', '내부 온도 1 최고', '내부 온도 1 최저', '내부 습도 1 평균', '내부 습도 1 최고', \n","               '내부 습도 1 최저', '내부 이슬점 평균', '내부 이슬점 최고', '내부 이슬점 최저']"],"metadata":{"id":"t_npmNtUKmvm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def csv_load(path):\n","    temp = pd.read_csv(path)\n","    temp = np.array(temp[csv_features])\n","    try:\n","      temp = temp.astype(float)\n","    except:\n","      temp[temp=='-']=0.\n","      temp = temp.astype(float)\n","    temp = cv2.resize(temp, dsize = (9,144))\n","    return temp\n","\n","csvs = [csv_load(k) for k in tqdm(train_csv)]\n","csvs = np.array(csvs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XKNf3Mw7Knrq","executionInfo":{"status":"ok","timestamp":1643035592071,"user_tz":-540,"elapsed":39024,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"a9fc01d2-15d1-4a05-cd8f-91e612e9eb3b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 5767/5767 [00:38<00:00, 149.55it/s]\n"]}]},{"cell_type":"markdown","source":["# 전처리 "],"metadata":{"id":"N3j4ztG6Kuif"}},{"cell_type":"markdown","source":["## 믹싱 "],"metadata":{"id":"UrJvOh7eKvT0"}},{"cell_type":"code","source":["index = np.arange(len(imgs))\n","np.random.shuffle(index)"],"metadata":{"id":"DcWEqmPNKw_Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["labels = np.array(labels)\n","csvs = np.array(csvs)\n","imgs = np.array(imgs)\n","bboxes = np.array(bboxes)"],"metadata":{"id":"2Ov4ORreKx5a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["augmented_labels = labels[index]\n","augmented_bboxes= bboxes[index]\n","augmented_csvs = csvs[index]\n","augmented_imgs = imgs[index]"],"metadata":{"id":"eMdGJyigKyl8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["augmented_imgs = efficientnet.preprocess_input(augmented_imgs)"],"metadata":{"id":"DINTQDCGKziN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(augmented_imgs.shape,augmented_csvs.shape,augmented_labels.shape,augmented_bboxes.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aq87HHNHK0Y1","executionInfo":{"status":"ok","timestamp":1643035859528,"user_tz":-540,"elapsed":439,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"9a143b6d-ec02-463c-ea44-87591cfdfe3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(5767, 512, 1081, 3) (5767, 144, 9) (5767,) (5767, 4)\n"]}]},{"cell_type":"markdown","source":["## 트레인 - 테스트 분할 "],"metadata":{"id":"aEdrpb7lK1RE"}},{"cell_type":"code","source":["index = int(len(augmented_csvs)*0.9)\n","train_imgs = augmented_imgs[:index]\n","test_imgs = augmented_imgs[index:]\n","\n","train_csvs = augmented_csvs[:index]\n","test_csvs = augmented_csvs[index:]\n","\n","train_labels = augmented_labels[:index]\n","test_labels = augmented_labels[index:]\n","\n","train_bboxes = augmented_bboxes[:index]\n","test_bboxes = augmented_bboxes[index:]"],"metadata":{"id":"Jr0x7_97K29X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(train_imgs.shape, train_csvs.shape, train_labels.shape,train_bboxes.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5MCaf8dxK7Tr","executionInfo":{"status":"ok","timestamp":1643035869817,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"6d3c5611-5673-476a-96d3-2ff786221d2e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(5190, 512, 1081, 3) (5190, 144, 9) (5190,) (5190, 4)\n"]}]},{"cell_type":"markdown","source":["# 모델링 "],"metadata":{"id":"MOPE5e1DK7jW"}},{"cell_type":"markdown","source":["## 모델 사전 설정 "],"metadata":{"id":"kzXtLheKK-C5"}},{"cell_type":"code","source":["# copy from https://gist.github.com/stared/dfb4dfaf6d9a8501cd1cc8b8cb806d2e\n","# loss 실시간 출력 \n","from IPython.display import clear_output\n","from tensorflow.keras.callbacks import Callback\n","\n","class PlotLosses(Callback):\n","\n","  def on_train_begin(self, logs={}):\n","    self.epochs = []\n","    self.losses = []\n","    self.val_losses = []\n","    self.logs = []\n","    self.fig = plt.figure()\n","\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","\n","    self.epochs.append(epoch)\n","    self.losses.append(logs.get('loss'))\n","    self.val_losses.append(logs.get('val_loss'))\n","\n","    clear_output(wait=True)\n","    plt.plot(self.epochs, self.losses, label=\"loss\")\n","    plt.plot(self.epochs, self.val_losses, label=\"val_loss\")\n","    plt.legend()\n","    plt.show();\n","    print(\"loss = \", self.losses[-1], \", val_loss = \", self.val_losses[-1])\n","\n","#call backs 선언\n","plot_losses = PlotLosses()\n","\n","from tensorflow.keras.callbacks import ModelCheckpoint #<- model 저장 객체, best_model.h5라는 모델 이 저장 됨 \n","model_check_point = ModelCheckpoint(\n","    'best_model.h5', \n","    monitor='val_loss', \n","    verbose=1, \n","    save_best_only=True)\n","\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',  # 모니터링 대상, 이걸 기준으로 멈춤 \n","    verbose=1,\n","    patience=50)         # 중지까지의 여유분\n","\n","from tensorflow.keras.callbacks import ReduceLROnPlateau\n","reduce_lr = ReduceLROnPlateau(\n","    monitor='val_loss', # 모니터링 대상\n","    patience=25,        # 대상ㅃ 기간동안 유지\n","    factor=0.2,         # 줄이는 양                              \n","    min_learning_rate=0.00001)     # 최소 학습율\n","\n","callbacks = [model_check_point, plot_losses, early_stopping, reduce_lr]"],"metadata":{"id":"Em8fW7zLK_tN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#optimizer leraning rate 조절 \n","adam = optimizers.Adam(learning_rate = 0.0005)"],"metadata":{"id":"ZPaX6RWPLBJt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["conv_layers = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","conv_layers.trainable = False"],"metadata":{"id":"B1dmHfMuLCck"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#어그먼테이션\n","data_augmentation = tf.keras.Sequential([\n","    tf.keras.layers.experimental.preprocessing.RandomTranslation([-0.1, 0.1], [-0.1, 0.1], seed = 777),\n","    tf.keras.layers.experimental.preprocessing.RandomCrop(224, 224, seed = 777),\n","    tf.keras.layers.experimental.preprocessing.RandomZoom([-0.1, 0.1], [-0.1, 0.1], seed = 777),\n","    tf.keras.layers.experimental.preprocessing.RandomRotation([-0.1, 0.1], seed = 777),\n","    tf.keras.layers.experimental.preprocessing.CenterCrop(224, 224),\n","])"],"metadata":{"id":"orInBuVmLZ5s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Phase 1 - bbox extraction "],"metadata":{"id":"0pUfGg0MLDht"}},{"cell_type":"code","source":["bbox_model = Sequential()\n","bbox_model.add(Input((512,1081,3)))\n","bbox_model.add(data_augmentation)\n","bbox_model.add(conv_layers)\n","bbox_model.add(Flatten())\n","bbox_model.add(Dense(64,activation = 'relu'))\n","bbox_model.add(BatchNormalization())\n","bbox_model.add(Dense(32,activation = 'relu'))\n","bbox_model.add(Dense(4))\n","\n","bbox_model.compile(optimizer=adam,loss='mse',metrics=['mae'])\n","bbox_model.fit(train_imgs,train_bboxes, epochs=30, verbose=1, batch_size=256, validation_split=0.1,callbacks=callbacks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"uTPiVRB7LHsJ","executionInfo":{"status":"ok","timestamp":1643036479456,"user_tz":-540,"elapsed":452710,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"0101e989-2e2f-4ec8-93a1-592de166daa2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["loss =  13144.9755859375 , val_loss =  11136.3994140625\n","\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r19/19 [==============================] - 8s 443ms/step - loss: 13144.9756 - mae: 82.9098 - val_loss: 11136.3994 - val_mae: 77.8797 - lr: 5.0000e-04\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f24d62e4150>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["bbox_model.save('bbox_model.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fg7TIhZ2px7r","executionInfo":{"status":"ok","timestamp":1643037278478,"user_tz":-540,"elapsed":1233,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"04a69479-d2fd-414d-b614-34cc74b903ce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]}]},{"cell_type":"markdown","source":["## Phase2 - Label Classification "],"metadata":{"id":"4oiKEd76LtkX"}},{"cell_type":"code","source":["#Env 데이터 파트 \n","Env_input = Input((144,9)) #<---- shape \n","x = Bidirectional(LSTM(128,return_sequences= True))(Env_input) #bidirec\n","x = Bidirectional(LSTM(128))(x)\n","x = Flatten()(x)\n","x = BatchNormalization()(x)\n","x = Dense(64, activation ='relu')(x)\n","x = BatchNormalization()(x)\n","x = Dense(32, activation ='relu')(x)\n","x = BatchNormalization()(x)\n","Env_output = Dense(10 ,activation='linear')(x)\n","\n","#iamge 데이터 파트 \n","image_input = Input((512,1081,3))\n","x = data_augmentation(image_input)\n","x = conv_layers(x)\n","x = Flatten()(x)\n","x = BatchNormalization()(x)\n","x = Dense(64, activation='relu')(x)\n","x = BatchNormalization()(x)\n","x = Dense(32, activation='relu')(x)\n","x = BatchNormalization()(x)\n","image_output = Dense(10, activation='linear')(x)\n","\n","crops_input = Input(4)\n","x = Dense(64, activation = 'relu')(crops_input)\n","x = BatchNormalization()(x)\n","x = Dense(32, activation = 'relu')(x)\n","x = BatchNormalization()(x)\n","crops_output = Dense(10, activation = 'linear')(x)\n","\n","#헤드 결합 \n","combined_input = concatenate([Env_output,image_output,crops_output])\n","x= Dense(64, activation = 'relu')(combined_input) #<--- Dense \n","x = BatchNormalization()(x)\n","x= Dense(32, activation = 'relu')(x) #<--- Dense \n","x = BatchNormalization()(x)\n","output = Dense(25,activation = 'softmax')(x)\n","\n","label_model = Model([Env_input,image_input,crops_input],output)"],"metadata":{"id":"0ngNuNYJOCQm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#모델 설계 구조 \n","import tensorflow \n","tensorflow.keras.utils.plot_model(label_model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"VSXEdesWONxi","executionInfo":{"status":"ok","timestamp":1643036622172,"user_tz":-540,"elapsed":2085,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"455f80df-6b78-4333-900c-451a31ac7d09"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["#학습 방식은 동일 \n","label_model.compile(optimizer=adam, loss=\"sparse_categorical_crossentropy\",metrics = ['accuracy'],)\n","label_model.summary() #optimizer tuning"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8RLaky1jON-K","executionInfo":{"status":"ok","timestamp":1643036625402,"user_tz":-540,"elapsed":426,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"d039aca9-a3a1-430a-d727-ae25e707a163"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_6 (InputLayer)           [(None, 144, 9)]     0           []                               \n","                                                                                                  \n"," input_7 (InputLayer)           [(None, 512, 1081,   0           []                               \n","                                3)]                                                               \n","                                                                                                  \n"," bidirectional (Bidirectional)  (None, 144, 256)     141312      ['input_6[0][0]']                \n","                                                                                                  \n"," sequential (Sequential)        (None, 224, 224, 3)  0           ['input_7[0][0]']                \n","                                                                                                  \n"," bidirectional_1 (Bidirectional  (None, 256)         394240      ['bidirectional[0][0]']          \n"," )                                                                                                \n","                                                                                                  \n"," efficientnetb0 (Functional)    (None, 7, 7, 1280)   4049571     ['sequential[4][0]']             \n","                                                                                                  \n"," flatten_4 (Flatten)            (None, 256)          0           ['bidirectional_1[0][0]']        \n","                                                                                                  \n"," flatten_5 (Flatten)            (None, 62720)        0           ['efficientnetb0[4][0]']         \n","                                                                                                  \n"," batch_normalization_4 (BatchNo  (None, 256)         1024        ['flatten_4[0][0]']              \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_7 (BatchNo  (None, 62720)       250880      ['flatten_5[0][0]']              \n"," rmalization)                                                                                     \n","                                                                                                  \n"," input_8 (InputLayer)           [(None, 4)]          0           []                               \n","                                                                                                  \n"," dense_12 (Dense)               (None, 64)           16448       ['batch_normalization_4[0][0]']  \n","                                                                                                  \n"," dense_15 (Dense)               (None, 64)           4014144     ['batch_normalization_7[0][0]']  \n","                                                                                                  \n"," dense_18 (Dense)               (None, 64)           320         ['input_8[0][0]']                \n","                                                                                                  \n"," batch_normalization_5 (BatchNo  (None, 64)          256         ['dense_12[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_8 (BatchNo  (None, 64)          256         ['dense_15[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_10 (BatchN  (None, 64)          256         ['dense_18[0][0]']               \n"," ormalization)                                                                                    \n","                                                                                                  \n"," dense_13 (Dense)               (None, 32)           2080        ['batch_normalization_5[0][0]']  \n","                                                                                                  \n"," dense_16 (Dense)               (None, 32)           2080        ['batch_normalization_8[0][0]']  \n","                                                                                                  \n"," dense_19 (Dense)               (None, 32)           2080        ['batch_normalization_10[0][0]'] \n","                                                                                                  \n"," batch_normalization_6 (BatchNo  (None, 32)          128         ['dense_13[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_9 (BatchNo  (None, 32)          128         ['dense_16[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_11 (BatchN  (None, 32)          128         ['dense_19[0][0]']               \n"," ormalization)                                                                                    \n","                                                                                                  \n"," dense_14 (Dense)               (None, 10)           330         ['batch_normalization_6[0][0]']  \n","                                                                                                  \n"," dense_17 (Dense)               (None, 10)           330         ['batch_normalization_9[0][0]']  \n","                                                                                                  \n"," dense_20 (Dense)               (None, 10)           330         ['batch_normalization_11[0][0]'] \n","                                                                                                  \n"," concatenate (Concatenate)      (None, 30)           0           ['dense_14[0][0]',               \n","                                                                  'dense_17[0][0]',               \n","                                                                  'dense_20[0][0]']               \n","                                                                                                  \n"," dense_21 (Dense)               (None, 64)           1984        ['concatenate[0][0]']            \n","                                                                                                  \n"," batch_normalization_12 (BatchN  (None, 64)          256         ['dense_21[0][0]']               \n"," ormalization)                                                                                    \n","                                                                                                  \n"," dense_22 (Dense)               (None, 32)           2080        ['batch_normalization_12[0][0]'] \n","                                                                                                  \n"," batch_normalization_13 (BatchN  (None, 32)          128         ['dense_22[0][0]']               \n"," ormalization)                                                                                    \n","                                                                                                  \n"," dense_23 (Dense)               (None, 25)           825         ['batch_normalization_13[0][0]'] \n","                                                                                                  \n","==================================================================================================\n","Total params: 8,881,594\n","Trainable params: 4,705,303\n","Non-trainable params: 4,176,291\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["history = label_model.fit([train_csvs,train_imgs,train_bboxes],train_labels, epochs=50, verbose=1, batch_size=256, validation_split=0.1,callbacks=callbacks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":327},"id":"IaQh_nroOSh2","executionInfo":{"status":"error","timestamp":1643037182810,"user_tz":-540,"elapsed":10688,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"a9bf2ac6-a1f7-4523-922d-4d9eac3e61c8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"InternalError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInternalError\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-a757102ed901>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain_csvs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_imgs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_bboxes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m256\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_split\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/constant_op.py\u001b[0m in \u001b[0;36mconvert_to_eager_tensor\u001b[0;34m(value, ctx, dtype)\u001b[0m\n\u001b[1;32m    104\u001b[0m       \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdtypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_datatype_enum\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m   \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEagerTensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInternalError\u001b[0m: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:GPU:0 in order to run _EagerConst: Dst tensor is not initialized."]}]},{"cell_type":"code","source":["history = label_model.fit([train_csvs,train_imgs,train_bboxes],train_labels, epochs=50, verbose=1, batch_size=256, validation_split=0.1,callbacks=callbacks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":327},"id":"K_Xfy7tOORWB","executionInfo":{"status":"error","timestamp":1643037199786,"user_tz":-540,"elapsed":10582,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"b6c04cc5-b5fb-4503-fb36-8062bec13df5"},"execution_count":null,"outputs":[{"output_type":"error","ename":"InternalError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInternalError\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-a757102ed901>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain_csvs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_imgs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_bboxes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m256\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_split\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/constant_op.py\u001b[0m in \u001b[0;36mconvert_to_eager_tensor\u001b[0;34m(value, ctx, dtype)\u001b[0m\n\u001b[1;32m    104\u001b[0m       \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdtypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_datatype_enum\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m   \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEagerTensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInternalError\u001b[0m: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:GPU:0 in order to run _EagerConst: Dst tensor is not initialized."]}]},{"cell_type":"code","source":["label_model.save('label_model.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Seh0N_DTT5iN","executionInfo":{"status":"ok","timestamp":1643037263735,"user_tz":-540,"elapsed":959,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"cd6ca310-f4d2-48fc-e6fa-b2bdda10f385"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]}]},{"cell_type":"markdown","source":["# Submission "],"metadata":{"id":"QiMKvJd1T75P"}},{"cell_type":"markdown","source":["## 데이터 로드 및 학습 "],"metadata":{"id":"Wz-r3HasT8jx"}},{"cell_type":"code","source":["!unzip test.zip"],"metadata":{"id":"73WO3wXYT9xd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow import keras \n","label_model = keras.models.load_model('label_model.h5')\n","bbox_model = keras.models.load_model('bbox_model.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h9ep4QUXp26Z","executionInfo":{"status":"ok","timestamp":1643037978092,"user_tz":-540,"elapsed":10181,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"6983eafb-d7bf-476c-e621-ea6725ff441a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n","WARNING:tensorflow:Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n"]}]},{"cell_type":"code","source":["test_csv = sorted(glob('test/*/*.csv'))\n","test_jpg = sorted(glob('test/*/*.jpg'))"],"metadata":{"id":"16AUmB3XT_DA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i = int(10381/2)\n","pred_csv_1 = np.array(test_csv[:i])\n","pred_jpg_1 = np.array(test_jpg[:i])\n","\n","pred_csv_2 = np.array(test_csv[i:i*2])\n","pred_jpg_2 = np.array(test_jpg[i:i*2])\n","\n","pred_csv_3 = np.array(test_csv[i*2:i*3])\n","pred_jpg_3 = np.array(test_jpg[i*2:i*3])\n","\n","pred_csv_4 = np.array(test_csv[i*3:i*4])\n","pred_jpg_4 = np.array(test_jpg[i*3:i*4])\n","\n","pred_csv_5 = np.array(test_csv[i*4:i*5])\n","pred_jpg_5 = np.array(test_jpg[i*4:i*5])\n","\n","pred_csv_6 = np.array(test_csv[i*5:i*6])\n","pred_jpg_6 = np.array(test_jpg[i*5:i*6])\n","\n","pred_csv_7 = np.array(test_csv[i*6:i*7])\n","pred_jpg_7 = np.array(test_jpg[i*6:i*7])\n","\n","pred_csv_8 = np.array(test_csv[i*7:i*8])\n","pred_jpg_8 = np.array(test_jpg[i*7:i*8])\n","\n","pred_csv_9 = np.array(test_csv[i*8:i*9])\n","pred_jpg_9 = np.array(test_jpg[i*8:i*9])\n","\n","pred_csv_10 = np.array(test_csv[i*9:])\n","pred_jpg_10= np.array(test_jpg[i*9:])"],"metadata":{"id":"D-bgptCAUCj8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def img_load(path):\n","    img = cv2.imread(path)\n","    right = standard_x - img.shape[1]\n","    img = cv2.copyMakeBorder(img, top, bottom, left, right, borderType)\n","    return img\n","\n","def csv_load(path):\n","    temp = pd.read_csv(path)\n","    temp = np.array(temp[csv_features])\n","    try:\n","      temp = temp.astype(float)\n","    except:\n","      temp[temp=='-']=0.\n","      temp = temp.astype(float)\n","    temp = cv2.resize(temp, dsize = (9,144))\n","    return temp\n","\n","standard_y = 512 \n","standard_x = 1081\n","borderType = cv2.BORDER_CONSTANT\n","top = 0\n","bottom =0\n","left = 0 "],"metadata":{"id":"U3JbTCrsqVzT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#이미지 파일 로드 \n","for i in range(1,10):\n","  exec(f'jpg_source = pred_jpg_{i}')\n","  exec(f'csv_source = pred_csv_{i}')\n","\n","  pred_jpgs = [img_load(k) for k in tqdm(jpg_source)]\n","  pred_jpgs = np.array(pred_jpgs)\n","  pred_jpgs = efficientnet.preprocess_input(pred_jpgs)\n","\n","  #csv 파일 로드 \n","\n","  pred_csvs = [csv_load(k) for k in tqdm(csv_source)]\n","  pred_csvs = np.array(pred_csvs)\n","\n","  #학습 \n","\n","  pred_bboxes = bbox_model.predict([pred_jpgs])\n","  y_1 = label_model.predict([pred_csvs,pred_jpgs,pred_bboxes])\n","  predicted_label = np.argmax(y_1,axis=1)\n","\n","  print(i)\n","  exec(f'a_{i} = predicted_label')"],"metadata":{"id":"gM3hL7NpUbMU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(a_1.shape,a_2.shape,a_3.shape,a_4.shape,a_5.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"9ZMBkgJzZlK-","executionInfo":{"status":"error","timestamp":1643038403612,"user_tz":-540,"elapsed":424,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"e5f78d4c-dbe7-4d3b-f468-9f03b12010c8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-8f0123c59eb6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma_1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma_2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma_3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma_4\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma_5\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'a_1' is not defined"]}]},{"cell_type":"code","source":["submission = pd.read_csv('/content/sample_submission.csv')"],"metadata":{"id":"vjNRghCiZmJJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i=10381\n","submission['label'][:i] =a_1\n","submission['label'][i:i*2] = a_2\n","submission['label'][i*2:i*3] = a_3\n","submission['label'][i*3:i*4] = a_4\n","submission['label'][i*4:] = a_5"],"metadata":{"id":"5UiT7QZUZndH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["submission['label'] = submission['label'].apply(lambda x:label_decoding[x])"],"metadata":{"id":"vecvnd5SZpXs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["submission.to_csv('submission16.csv',index=False)"],"metadata":{"id":"sVgtYGgCZrMV"},"execution_count":null,"outputs":[]}]}