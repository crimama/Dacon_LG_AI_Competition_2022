{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"22.01.23_ver1_dropout_crop_diseases_classifcation_baseline","provenance":[{"file_id":"13IHwL_WAvx3XRDhCbLsz2wtqgrnbvEtt","timestamp":1642914064042},{"file_id":"1IwQ_PgYuzU-0uJguU1z3CQgG7mDo01-K","timestamp":1642642447462}],"collapsed_sections":[],"machine_shape":"hm","mount_file_id":"1Jo-ASurd9BD7DZmcKgAee1exj6DaCfOX","authorship_tag":"ABX9TyPLztiBgjOX8XDt8/KH58tr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# 사전 준비 "],"metadata":{"id":"ETxqJYy-l0gL"}},{"cell_type":"markdown","metadata":{"id":"Ab8zJIYh-fgL"},"source":["##데이터 호출 "]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":147179,"status":"ok","timestamp":1642935152357,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"},"user_tz":-540},"id":"fJThLClH-hr9","outputId":"c1d47104-bf1a-4315-c312-2f302e402e83"},"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  /content/drive/MyDrive/DataSet/작물병해/data.zip\n","  inflating: sample_submission.csv   \n","  inflating: test.zip                \n","  inflating: train.csv               \n","  inflating: train.zip               \n"]}],"source":["!unzip /content/drive/MyDrive/DataSet/작물병해/data.zip"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1-0ubyia_1Nu"},"outputs":[],"source":["!unzip train.zip"]},{"cell_type":"markdown","metadata":{"id":"Zo0y4tau_V4E"},"source":["## 모듈 임포트"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"dRznw7f2_XCs","executionInfo":{"status":"ok","timestamp":1642935169980,"user_tz":-540,"elapsed":687,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"outputs":[],"source":["import pandas as pd \n","import numpy as np \n","import matplotlib.pyplot as plt \n","import os\n","import cv2 \n","from glob import glob\n","from tqdm import tqdm\n","import json"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"820F_6HCb9-1","executionInfo":{"status":"ok","timestamp":1642935678754,"user_tz":-540,"elapsed":271,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"outputs":[],"source":["from tensorflow.keras import Sequential\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.utils import Sequence\n","from tensorflow.keras.layers import BatchNormalization\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Activation\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras import Model\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.applications import resnet50, efficientnet\n","from tensorflow.keras.applications import ResNet50, EfficientNetB0\n","from tensorflow.keras.layers import Bidirectional, LSTM, GRU"]},{"cell_type":"markdown","metadata":{"id":"MM2kasZcgPEq"},"source":["# 데이터 로드"]},{"cell_type":"markdown","metadata":{"id":"1fg7KDK2gRuo"},"source":["## 디렉토리 로드"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"lfYFmBZyHZEh","executionInfo":{"status":"ok","timestamp":1642935181260,"user_tz":-540,"elapsed":457,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"outputs":[],"source":["train_csv = sorted(glob('train/*/*.csv'))\n","train_jpg = sorted(glob('train/*/*.jpg'))\n","train_json = sorted(glob('train/*/*.json'))"]},{"cell_type":"markdown","source":["## 환경 데이터 통계량 계산 for Min Max Scaling "],"metadata":{"id":"7uE_pvrjlSqV"}},{"cell_type":"code","source":["# 분석에 사용할 feature 선택\n","csv_features = ['내부 온도 1 평균', '내부 온도 1 최고', '내부 온도 1 최저', '내부 습도 1 평균', '내부 습도 1 최고', \n","                '내부 습도 1 최저', '내부 이슬점 평균', '내부 이슬점 최고', '내부 이슬점 최저']\n","\n","csv_files = sorted(glob('train/*/*.csv'))\n","\n","temp_csv = pd.read_csv(csv_files[0])[csv_features]\n","max_arr, min_arr = temp_csv.max().to_numpy(), temp_csv.min().to_numpy()\n","\n","# feature 별 최대값, 최솟값 계산\n","for csv in tqdm(csv_files[1:]):\n","    temp_csv = pd.read_csv(csv)[csv_features].to_numpy()\n","    temp_csv[temp_csv=='-'] = 0 \n","    temp_csv = temp_csv.astype(np.float)\n","    temp_max, temp_min = temp_csv.max(axis=0), temp_csv.min(axis=0)\n","    max_arr = np.max([max_arr,temp_max], axis=0)\n","    min_arr = np.min([min_arr,temp_min], axis=0)\n","\n","# feature 별 최대값, 최솟값 dictionary 생성\n","csv_feature_dict = {csv_features[i]:[min_arr[i], max_arr[i]] for i in range(len(csv_features))}\n","csv_feature_dict"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NL8PeyjrlVYw","executionInfo":{"status":"ok","timestamp":1642935540843,"user_tz":-540,"elapsed":38818,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"0c34e356-849a-4839-a85e-730c5a8e45b5"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["  0%|          | 0/5766 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:13: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n","  del sys.path[0]\n","100%|██████████| 5766/5766 [00:38<00:00, 150.53it/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["{'내부 습도 1 최고': [0.0, 100.0],\n"," '내부 습도 1 최저': [0.0, 100.0],\n"," '내부 습도 1 평균': [0.0, 100.0],\n"," '내부 온도 1 최고': [3.4, 47.6],\n"," '내부 온도 1 최저': [3.3, 47.0],\n"," '내부 온도 1 평균': [3.4, 47.3],\n"," '내부 이슬점 최고': [0.0, 34.7],\n"," '내부 이슬점 최저': [0.0, 34.4],\n"," '내부 이슬점 평균': [0.0, 34.5]}"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"28xaif_JgT0P"},"source":["## json 파일 로드 - 라벨 인코딩 "]},{"cell_type":"code","execution_count":14,"metadata":{"id":"hQmRd8iLH6GH","executionInfo":{"status":"ok","timestamp":1642935607819,"user_tz":-540,"elapsed":401,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"outputs":[],"source":["crops = []\n","diseases = []\n","risks = []\n","labels = []\n","\n","for i in range(len(train_json)):\n","    with open(train_json[i], 'r') as f:\n","        sample = json.load(f)\n","        crop = sample['annotations']['crop']\n","        disease = sample['annotations']['disease']\n","        risk = sample['annotations']['risk']\n","        label=f\"{crop}_{disease}_{risk}\"\n","    \n","        crops.append(crop)\n","        diseases.append(disease)\n","        risks.append(risk)\n","        labels.append(label)\n","        \n","label_unique = sorted(np.unique(labels))\n","label_encoding = {key:value for key,value in zip(label_unique, range(len(label_unique)))}\n","label_decoding = {value:key for key,value in zip(label_unique, range(len(label_unique)))}\n","\n","labels = [label_encoding[k] for k in labels]"]},{"cell_type":"markdown","source":["## Custom dataset 제작 "],"metadata":{"id":"k7fGl6cWmECh"}},{"cell_type":"code","source":["import numpy as np\n","import math\n","from tensorflow.keras.utils import Sequence\n","from abc import *\n","import traceback\n","\n","class CustomDataset(Sequence):\n","  def __init__(self, files, labels=None, shuffle = True, mode='train'):\n","        self.shuffle = shuffle\n","        self.batch_size = BATCH_SIZE\n","        self.mode = mode\n","        self.files = files\n","        self.csv_feature_dict = csv_feature_dict\n","        self.csv_feature_check = [0]*len(self.files)\n","        self.max_len = 24*6\n","        self.label_encoder = label_encoding\n","\n","  def __len__(self):\n","      return math.ceil(len(self.files) / self.batch_size)\n","  \n","  def __getitem__(self, idx):\n","    #디렉토리 파일에서 배치만큼 빼오기 \n","    # indices = indices[idx*self.batch_size:(idx+1)*self.batch_size]\n","    file_lists = np.array(self.files)[indices]\n","\n","    image_lists = []\n","    csv_lists = []\n","    label_lists = []\n","    for file in file_lists:\n","      file_name = file.split('/')[-1]#<----- 이미지 번호를 가져 옴 \n","      json_path = f'{file}/{file_name}.json' #<---위에서 추출한 이미지 번호를 경로로 저장 \n","      image_path = f'{file}/{file_name}.jpg'#<--- 이미지 번호로 경로를 만듬 \n","\n","      if self.csv_feature_check[idx] == 0:\n","        csv_path = f'{file}/{file_name}.csv'\n","        df = pd.read_csv(csv_path)\n","        df = df[self.csv_feature_dict.keys()]\n","        temp_columns = df.columns\n","        df = np.array(df)\n","        df[df=='-']=0\n","        df = df.astype(np.float)\n","        df = pd.DataFrame(df)\n","        df.columns = temp_columns\n","\n","        for col in self.csv_feature_dict.keys():\n","              df[col] = df[col] - self.csv_feature_dict[col][0]\n","              df[col] = df[col] / (self.csv_feature_dict[col][1]-self.csv_feature_dict[col][0])\n","        csv_feature = df.to_numpy()[self.max_len:]\n","        csv_features[idx] = csv_feature\n","        self.csv_feature_check[idx] = 1\n","      else:\n","        csv_feature = self.csv_features[idx]\n","      \n","      img = cv2.imread(image_path)\n","      img = cv2.resize(img, dsize=(256, 256), interpolation=cv2.INTER_AREA)\n","      img = efficientnet.preprocess_input(img)\n","      \n","\n","      if self.mode == 'train':\n","          with open(json_path, 'r') as f:\n","              json_file = json.load(f)\n","          \n","          crop = json_file['annotations']['crop']\n","          disease = json_file['annotations']['disease']\n","          risk = json_file['annotations']['risk']\n","          label = f'{crop}_{disease}_{risk}'\n","      image_lists.append(img)\n","      csv_lists.append(csv_feature)\n","      label_lists.append(self.label_encoder[label])\n","\n","    return csv_lists,image_lists, label_lists\n","\n","  def on_epoch_end(self):\n","    self.indices = np.arange(len(self.files))\n","    if self.shuffle == True:\n","      np.random.shuffle(self.indices)"],"metadata":{"id":"1KQDMv-HmIMc","executionInfo":{"status":"ok","timestamp":1642940108013,"user_tz":-540,"elapsed":401,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":221,"outputs":[]},{"cell_type":"code","source":["train_data_generator = CustomDataset(files)\n","indices = np.arange(len(files))\n","np.random.shuffle(indices)\n","indices = indices[32:64]"],"metadata":{"id":"itrHJL7csyGt","executionInfo":{"status":"ok","timestamp":1642940109958,"user_tz":-540,"elapsed":278,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":222,"outputs":[]},{"cell_type":"code","source":["csvs, imgs,  labels = train_data_generator.__getitem__(0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-NvQV1k_tHl5","executionInfo":{"status":"ok","timestamp":1642940150532,"user_tz":-540,"elapsed":821,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"81351b03-1f50-4c3c-df44-ac8336af5c6d"},"execution_count":224,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:40: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n"]}]},{"cell_type":"code","source":["file = files[3]\n","csv_list = []\n","for file in files[:32]:\n","  file_name = file.split('/')[-1]\n","  csv_path = f'{file}/{file_name}.csv'\n","  df = pd.read_csv(csv_path)\n","  df = df[csv_feature_dict.keys()]\n","  temp_columns = df.columns\n","  df = np.array(df)\n","  df[df=='-']=0\n","  df = df.astype(np.float)\n","  df = pd.DataFrame(df)\n","  df.columns = temp_columns\n","\n","  for col in csv_feature_dict.keys():\n","              df[col] = df[col] - csv_feature_dict[col][0]\n","              df[col] = df[col] / (csv_feature_dict[col][1]-csv_feature_dict[col][0])\n","  csv_feature = df.to_numpy()\n","  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q_jZB_Co3Tny","executionInfo":{"status":"ok","timestamp":1642942927142,"user_tz":-540,"elapsed":770,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"1645674e-ddcc-44be-a89b-4d0f9ec68bf5"},"execution_count":255,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n","  # Remove the CWD from sys.path while we load stuff.\n"]}]},{"cell_type":"code","source":["csv_feature.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"__01J75jA-Ei","executionInfo":{"status":"ok","timestamp":1642942933048,"user_tz":-540,"elapsed":353,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"d8c8a875-0e82-4508-a103-ac8658c9d226"},"execution_count":257,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(588, 9)"]},"metadata":{},"execution_count":257}]},{"cell_type":"code","source":["BATCH_SIZE = 32\n","class_n = len(label_encoding)\n","learning_rate = 1e-4\n","embedding_dim = 512\n","num_features = len(csv_feature_dict)\n","max_len = 24*6\n","dropout_rate = 0.1\n","epochs = 30\n","vision_pretrain = True\n","save_path = 'best_model.pt'"],"metadata":{"id":"eyYBsTFNnXF3","executionInfo":{"status":"ok","timestamp":1642940008991,"user_tz":-540,"elapsed":275,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":209,"outputs":[]},{"cell_type":"code","source":["len(set(labels))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xRBw91zKQavt","executionInfo":{"status":"ok","timestamp":1642940010076,"user_tz":-540,"elapsed":4,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"485c58a4-2911-4d26-a0a4-6ca45048cd6d"},"execution_count":210,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10"]},"metadata":{},"execution_count":210}]},{"cell_type":"markdown","source":["# CSV 파일 확인 "],"metadata":{"id":"MPbTaSpkCGxD"}},{"cell_type":"code","source":["train_csv = sorted(glob('train/*/*.csv'))"],"metadata":{"id":"T8Dvvjm6CH96","executionInfo":{"status":"ok","timestamp":1642943004859,"user_tz":-540,"elapsed":423,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":258,"outputs":[]},{"cell_type":"code","source":["path = train_csv[0]\n","length = []\n","for path in tqdm(train_csv):\n","  df = pd.read_csv(path)\n","  length.append(len(df))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5ORAV9HcCL16","executionInfo":{"status":"ok","timestamp":1642943282932,"user_tz":-540,"elapsed":34650,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"f2a1c2a6-49df-4a99-c3b6-1071dab7446c"},"execution_count":269,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 5767/5767 [00:34<00:00, 166.85it/s]\n"]}]},{"cell_type":"code","source":["df = pd.DataFrame([length,labels,crops,diseases,risks]).T\n","df.columns = ['csvlength','labels','crop','disease','risk']"],"metadata":{"id":"0Hx98B8uCaTK","executionInfo":{"status":"ok","timestamp":1642944032589,"user_tz":-540,"elapsed":423,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":285,"outputs":[]},{"cell_type":"code","source":["df.to_csv('label_crop.csv')"],"metadata":{"id":"ypXimrbQDeps","executionInfo":{"status":"ok","timestamp":1642943779978,"user_tz":-540,"elapsed":449,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":281,"outputs":[]},{"cell_type":"code","source":["crops = []\n","diseases = []\n","risks = []\n","labels = []\n","\n","for i in range(len(train_json)):\n","    with open(train_json[i], 'r') as f:\n","        sample = json.load(f)\n","        crop = sample['annotations']['crop']\n","        disease = sample['annotations']['disease']\n","        risk = sample['annotations']['risk']\n","        label=f\"{crop}_{disease}_{risk}\"\n","    \n","        crops.append(crop)\n","        diseases.append(disease)\n","        risks.append(risk)\n","        labels.append(label)\n","        \n","label_unique = sorted(np.unique(labels))\n","label_encoding = {key:value for key,value in zip(label_unique, range(len(label_unique)))}\n","label_decoding = {value:key for key,value in zip(label_unique, range(len(label_unique)))}\n","\n","labels = [label_encoding[k] for k in labels]"],"metadata":{"id":"9-X5Gfc1GDOy","executionInfo":{"status":"ok","timestamp":1642944018781,"user_tz":-540,"elapsed":320,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":282,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns \n","\n","sns.histplot(df['labels'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"xjkVULw7GEEd","executionInfo":{"status":"ok","timestamp":1642944092968,"user_tz":-540,"elapsed":556,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"09dcaad0-ebd9-4534-a974-5df8e8fc5642"},"execution_count":291,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f13b1b6c510>"]},"metadata":{},"execution_count":291},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["pd.pivot_table(df,index=['labels','csvlength'],aggfunc = sum).drop(columns = ['disease','risk'])"],"metadata":{"id":"RGMXle6aGZ6R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"TlUf9cPqG3XA","executionInfo":{"status":"ok","timestamp":1642944800376,"user_tz":-540,"elapsed":305,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"e593726a-b34a-4daa-b272-025a7fd88822"},"execution_count":311,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-d7ebd405-0eaa-4798-ae7a-00e14c265321\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>csvlength</th>\n","      <th>labels</th>\n","      <th>crop</th>\n","      <th>disease</th>\n","      <th>risk</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>588</td>\n","      <td>9</td>\n","      <td>3</td>\n","      <td>b7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>294</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>294</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>294</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>294</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5762</th>\n","      <td>294</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5763</th>\n","      <td>294</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5764</th>\n","      <td>294</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>a5</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>5765</th>\n","      <td>294</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5766</th>\n","      <td>294</td>\n","      <td>14</td>\n","      <td>5</td>\n","      <td>b6</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5767 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7ebd405-0eaa-4798-ae7a-00e14c265321')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d7ebd405-0eaa-4798-ae7a-00e14c265321 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d7ebd405-0eaa-4798-ae7a-00e14c265321');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["     csvlength labels crop disease risk\n","0          588      9    3      b7    1\n","1          294      3    3      00    0\n","2          294      3    3      00    0\n","3          294      3    3      00    0\n","4          294      3    3      00    0\n","...        ...    ...  ...     ...  ...\n","5762       294      3    3      00    0\n","5763       294      0    1      00    0\n","5764       294      2    2      a5    2\n","5765       294      0    1      00    0\n","5766       294     14    5      b6    1\n","\n","[5767 rows x 5 columns]"]},"metadata":{},"execution_count":311}]},{"cell_type":"code","source":["plt.hist(df['csvlength'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":357},"id":"L80leC2pJcQN","executionInfo":{"status":"ok","timestamp":1642944915245,"user_tz":-540,"elapsed":463,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"51933bcb-d6b9-472a-d5d7-7c3d9811cd13"},"execution_count":312,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([   8.,  367.,  270.,  114., 4244.,    0.,    0.,   20.,    0.,\n","         744.]),\n"," array([1.0, 59.9, 118.8, 177.7, 236.6, 295.5, 354.4, 413.3, 472.2, 531.1,\n","        590.0], dtype=object),\n"," <a list of 10 Patch objects>)"]},"metadata":{},"execution_count":312},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df['risk'] = df['risk'].astype(int)"],"metadata":{"id":"2qH9EbYwK67K","executionInfo":{"status":"ok","timestamp":1642945362086,"user_tz":-540,"elapsed":287,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}}},"execution_count":330,"outputs":[]},{"cell_type":"code","source":["df.pivot_table(index='csvlength', columns='labels',values='disease',aggfunc='count')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"_MCVhuxDJQNG","executionInfo":{"status":"ok","timestamp":1642945425011,"user_tz":-540,"elapsed":300,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"7f86abcf-53f5-45b1-f865-4916fa41166f"},"execution_count":338,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-7ec1c561-fb88-44d4-a99e-84fe21b8d2b4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>labels</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","      <th>22</th>\n","      <th>23</th>\n","      <th>24</th>\n","    </tr>\n","    <tr>\n","      <th>csvlength</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>5.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>74</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>150.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>574</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>156.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>577</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>586</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>588</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>156.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>424.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>590</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>83 rows × 25 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ec1c561-fb88-44d4-a99e-84fe21b8d2b4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7ec1c561-fb88-44d4-a99e-84fe21b8d2b4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7ec1c561-fb88-44d4-a99e-84fe21b8d2b4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["labels     0    1   2   3   4   5   6   7   ...     17  18  19  20  21  22  23  24\n","csvlength                                   ...                                   \n","1         NaN  5.0 NaN NaN NaN NaN NaN NaN  ...    NaN NaN NaN NaN NaN NaN NaN NaN\n","43        NaN  1.0 NaN NaN NaN NaN NaN NaN  ...    NaN NaN NaN NaN NaN NaN NaN NaN\n","45        NaN  1.0 NaN NaN NaN NaN NaN NaN  ...    NaN NaN NaN NaN NaN NaN NaN NaN\n","46        NaN  1.0 NaN NaN NaN NaN NaN NaN  ...    NaN NaN NaN NaN NaN NaN NaN NaN\n","74        NaN  NaN NaN NaN NaN NaN NaN NaN  ...    NaN NaN NaN NaN NaN NaN NaN NaN\n","...        ..  ...  ..  ..  ..  ..  ..  ..  ...    ...  ..  ..  ..  ..  ..  ..  ..\n","574       NaN  NaN NaN NaN NaN NaN NaN NaN  ...    NaN NaN NaN NaN NaN NaN NaN NaN\n","577       NaN  NaN NaN NaN NaN NaN NaN NaN  ...    NaN NaN NaN NaN NaN NaN NaN NaN\n","586       NaN  NaN NaN NaN NaN NaN NaN NaN  ...    4.0 NaN NaN NaN NaN NaN NaN NaN\n","588       NaN  NaN NaN NaN NaN NaN NaN NaN  ...  424.0 NaN NaN NaN NaN NaN NaN NaN\n","590       NaN  NaN NaN NaN NaN NaN NaN NaN  ...    1.0 NaN NaN NaN NaN NaN NaN NaN\n","\n","[83 rows x 25 columns]"]},"metadata":{},"execution_count":338}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","\n","labels = df['csvlength']\n","men_means = [20, 35, 30, 35, 27]\n","women_means = [25, 32, 34, 20, 25]\n","men_std = [2, 3, 4, 1, 2]\n","women_std = [3, 5, 2, 3, 3]\n","width = 0.35       # the width of the bars: can also be len(x) sequence\n","\n","fig, ax = plt.subplots()\n","\n","ax.bar(labels, men_means, width, yerr=men_std, label='Men')\n","ax.bar(labels, women_means, width, yerr=women_std, bottom=men_means,\n","       label='Women')\n","\n","ax.set_ylabel('Scores')\n","ax.set_title('Scores by group and gender')\n","ax.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"TfkYU668IxXV","executionInfo":{"status":"ok","timestamp":1642944774913,"user_tz":-540,"elapsed":340,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"1adc0d5d-216a-42dc-e9ad-8dd7befbcfba"},"execution_count":310,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.hist(df['csvlength'],bins=50)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"4t6hCZtgLeto","executionInfo":{"status":"ok","timestamp":1642945795834,"user_tz":-540,"elapsed":310,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"578e53d5-f053-4055-b0d4-7e9424112029"},"execution_count":341,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["len(df[df['csvlength']==294])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lIUG025_M3Vi","executionInfo":{"status":"ok","timestamp":1642945821283,"user_tz":-540,"elapsed":295,"user":{"displayName":"Hun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhVHZSSFgcflbXyuTjHb3XRMHAe4x_B6Mr4f6XvzA=s64","userId":"07972583068794560208"}},"outputId":"74e90f3e-a3f5-4eb9-d7a1-ea20c4089682"},"execution_count":342,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3562"]},"metadata":{},"execution_count":342}]}]}